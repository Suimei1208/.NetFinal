@{
    ViewData["Title"] = "Dashboard";
}
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/moment"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<link rel="stylesheet" href="~/css/indexPage.css" asp-append-version="true" />

<!-- Biểu đồ thứ nhất -->
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-body">
                    <canvas id="myChart1" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card text-center mb-4">
                <div class="card-body">
                    <h5 class="card-title">Total Quantity Sold Today</h5>
                    <p class="card-text">@ViewBag.TotalQuantitySoldToday</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center mb-4">
                <div class="card-body">
                    <h5 class="card-title">Total Amount Sold Today</h5>
                    <p class="card-text">@ViewBag.TotalAmountSoldToday.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN")) VND</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center mb-4">
                <div class="card-body">
                    <h5 class="card-title">Total Orders Created Today</h5>
                    <p class="card-text">@ViewBag.TotalOrdersCreatedToday</p>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    var productsSoldToday = @Html.Raw(Json.Serialize(ViewBag.ProductsSoldToday));

    var ctx1 = document.getElementById('myChart1').getContext('2d');
    var myChart1 = new Chart(ctx1, {
        type: 'bar',
        data: {
            labels: productsSoldToday.map(entry => entry.productName),
            datasets: [{
                label: 'Quantity Buy',
                data: productsSoldToday.map(entry => entry.totalQuantity),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>


<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <input type="date" id="startDate" class="form-control" placeholder="Start Date" />
        </div>
        <div class="col-md-4">
            <input type="date" id="endDate" class="form-control" placeholder="End Date" />
        </div>
        <div class="col-md-4">
            <button id="generateChartBtn" class="btn btn-primary">Generate Chart</button>
        </div>
    </div>

    <div class="row mt-4 chart-container">
        <div class="col-md-12">
            <canvas id="chartOrder" width="400" height="200"></canvas>
        </div>
    </div>
    <div class="row mt-4 chart-container">
        <div class="col-md-12">
            <canvas id="chartQuantity" width="400" height="200"></canvas>
        </div>
    </div>
    <div class="row mt-4 chart-container">
        <div class="col-md-12">
            <canvas id="chartAmount" width="400" height="200"></canvas>
        </div>
    </div>
</div>

<script>
    function updateEndDateMin(startDate) {
        var endDateInput = document.getElementById('endDate');
        endDateInput.setAttribute('min', startDate);
    }

    var today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').value = today;
    document.getElementById('endDate').value = today;
    updateEndDateMin(today); 

    document.getElementById('startDate').addEventListener('change', function() {
        updateEndDateMin(this.value);
    });
</script>

<script>
    var chartOrderInstance, chartQuantityInstance, chartAmountInstance;
    $(document).ready(function () {
        $('#generateChartBtn').click(function () {
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();
            $('.chart-container').show();

            $.getJSON('/Home/GetTotalOrdersData', { startDate: startDate, endDate: endDate })
                .done(function (data) {
                    createChart('chartOrder', data);
                });

            $.getJSON('/Home/GetTotalQuantityData', { startDate: startDate, endDate: endDate })
                .done(function (data) {
                    createChartQuantity('chartQuantity', data);
                });
            $.getJSON('/Home/GetTotalAmountData', { startDate: startDate, endDate: endDate })
                .done(function (data) {
                    createChartAmount('chartAmount', data);
                });

        });

        

        function createChart(canvasId, data) {
            if (chartOrderInstance) {
                chartOrderInstance.destroy();}
            var ctx = document.getElementById(canvasId).getContext('2d');

            // Chuyển đổi định dạng ngày để sắp xếp
            data.forEach(function (entry) {
                entry.Date = new Date(entry.Date);
            });

            // Sắp xếp dữ liệu theo ngày
            data.sort(function (a, b) {
                return a.Date - b.Date;
            });

            var dates = data.map(entry => entry.date);
            var totalOrders = data.map(entry => entry.totalOrders);

            chartOrderInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Total Orders',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        data: totalOrders,
                        fill: false,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM D'
                                }
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        function createChartQuantity(canvasId, data) {
            if (chartQuantityInstance) {
                chartQuantityInstance.destroy();
            }
            var ctx = document.getElementById(canvasId).getContext('2d');

            // Chuyển đổi định dạng ngày để sắp xếp
            data.forEach(function (entry) {
                entry.Date = new Date(entry.Date);
            });

            // Sắp xếp dữ liệu theo ngày
            data.sort(function (a, b) {
                return a.Date - b.Date;
            });

            var dates = data.map(entry => entry.date);
            var totalOrders = data.map(entry => entry.totalQuantity);

            chartQuantityInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Total Quantity',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        data: totalOrders,
                        fill: false,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    day: 'MMM D'
                                }
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        function createChartAmount(canvasId, data) {
            if (chartAmountInstance) {
                chartAmountInstance.destroy();
            }
            var ctx = document.getElementById(canvasId).getContext('2d');

            // Chuyển đổi định dạng ngày để sắp xếp
            data.forEach(function (entry) {
                entry.Date = new Date(entry.Date);
            });

            // Sắp xếp dữ liệu theo ngày
            data.sort(function (a, b) {
                return a.Date - b.Date;
            });

            var dates = data.map(entry => entry.date);
            var totalOrders = data.map(entry => entry.totalAmount);

            var datasets = [
                {
                    label: 'Total Amount',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    data: totalOrders,
                    fill: false,
                }
            ];

            if (userIsAdmin()) {
                var totalProfit = data.map(entry => entry.totalProfit);
                datasets.push({
                    label: 'Total Profit',
                    borderColor: 'rgba(255, 0, 0, 1)',
                    data: totalProfit,
                    fill: false,
                });
            }

            var chartData = {
                labels: dates,
                datasets: datasets
            };

            var chartOptions = {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            displayFormats: {
                                day: 'MMM D'
                            }
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            };

            chartAmountInstance = new Chart(ctx, {
                type: 'line',
                data: chartData,
                options: chartOptions
            });
        }


        var isAdmin = @Html.Raw(Json.Serialize(User.IsInRole("Admin")));

        function userIsAdmin() {
            return isAdmin;
        }
    });

</script>